-- ============================================================================
-- QUERY PATTERN: Multi-Fact Table with Selective Inheritance
-- ============================================================================

WITH RECURSIVE portfolio_tree AS (
    SELECT
        p.position_id, p.parent_instrument_id, p.child_instrument_id,
        p.quantity::NUMERIC as quantity, p.weight::NUMERIC as cumulative_weight,
        1 as depth, ARRAY[p.parent_instrument_id, p.child_instrument_id] as path_ids
    FROM positions p
    WHERE p.parent_instrument_id = 1  -- << DYNAMIC: Portfolio filter
      AND p.effective_from <= '2025-10-01'::DATE  -- << DYNAMIC: As-of date
      AND (p.effective_to IS NULL OR p.effective_to > '2025-10-01'::DATE)
    UNION ALL
    SELECT
        p.position_id, p.parent_instrument_id, p.child_instrument_id,
        (pt.quantity * COALESCE(p.quantity, 1.0))::NUMERIC,
        (pt.cumulative_weight * COALESCE(p.weight, 1.0))::NUMERIC,
        pt.depth + 1, pt.path_ids || p.child_instrument_id
    FROM positions p
    INNER JOIN portfolio_tree pt ON p.parent_instrument_id = pt.child_instrument_id
    WHERE p.effective_from <= '2025-10-01'::DATE
      AND (p.effective_to IS NULL OR p.effective_to > '2025-10-01'::DATE)
      AND NOT (p.child_instrument_id = ANY(pt.path_ids))
),
leaf_positions AS (
    SELECT DISTINCT ON (pt.child_instrument_id, pt.position_id)
        pt.position_id, pt.child_instrument_id as leaf_instrument_id, pt.quantity,
        pt.cumulative_weight, pt.path_ids, pt.depth
    FROM portfolio_tree pt
    WHERE NOT EXISTS (
        SELECT 1 FROM positions p2
        WHERE p2.parent_instrument_id = pt.child_instrument_id
          AND p2.effective_from <= '2025-10-01'::DATE
          AND (p2.effective_to IS NULL OR p2.effective_to > '2025-10-01'::DATE)
    )
    ORDER BY pt.child_instrument_id, pt.position_id, pt.depth DESC
),
-- Create separate path CTEs for each fact table
path_portfolio_attrs AS (
    SELECT
        lp.position_id, p.ordinality as path_order, fpa.*
    FROM leaf_positions lp
    CROSS JOIN unnest(lp.path_ids) WITH ORDINALITY as p(instrument_id, ordinality)
    LEFT JOIN fact_portfolio_attributes fpa
        ON fpa.instrument_id = p.instrument_id
        AND fpa.attribute_date = '2025-10-01'::DATE
),
path_risk_attrs AS (
    SELECT
        lp.position_id, p.ordinality as path_order, fra.*
    FROM leaf_positions lp
    CROSS JOIN unnest(lp.path_ids) WITH ORDINALITY as p(instrument_id, ordinality)
    LEFT JOIN fact_risk_attributes fra
        ON fra.instrument_id = p.instrument_id
        AND fra.attribute_date = '2025-10-01'::DATE
),
path_esg_scores AS (
    SELECT
        lp.position_id, p.ordinality as path_order, fes.*
    FROM leaf_positions lp
    CROSS JOIN unnest(lp.path_ids) WITH ORDINALITY as p(instrument_id, ordinality)
    LEFT JOIN fact_esg_scores fes
        ON fes.instrument_id = p.instrument_id
        AND fes.score_date = '2025-10-01'::DATE
)
-- Final select with attributes from all fact tables
SELECT
    lp.position_id,
    lp.leaf_instrument_id,
    i.ticker,
    i.isin,
    lp.quantity,
    lp.cumulative_weight,

    -- << INHERITED from fact_portfolio_attributes
    (SELECT ppa.portfolio_name FROM path_portfolio_attrs ppa
     WHERE ppa.position_id = lp.position_id AND ppa.portfolio_name IS NOT NULL
     ORDER BY ppa.path_order DESC LIMIT 1) as portfolio_name,

    (SELECT ppa.portfolio_strategy FROM path_portfolio_attrs ppa
     WHERE ppa.position_id = lp.position_id AND ppa.portfolio_strategy IS NOT NULL
     ORDER BY ppa.path_order DESC LIMIT 1) as portfolio_strategy,

    (SELECT ppa.portfolio_manager FROM path_portfolio_attrs ppa
     WHERE ppa.position_id = lp.position_id AND ppa.portfolio_manager IS NOT NULL
     ORDER BY ppa.path_order DESC LIMIT 1) as portfolio_manager,

    -- << INHERITED from fact_risk_attributes
    (SELECT pra.asset_class FROM path_risk_attrs pra
     WHERE pra.position_id = lp.position_id AND pra.asset_class IS NOT NULL
     ORDER BY pra.path_order DESC LIMIT 1) as asset_class,

    (SELECT pra.region FROM path_risk_attrs pra
     WHERE pra.position_id = lp.position_id AND pra.region IS NOT NULL
     ORDER BY pra.path_order DESC LIMIT 1) as region,

    (SELECT pra.sector FROM path_risk_attrs pra
     WHERE pra.position_id = lp.position_id AND pra.sector IS NOT NULL
     ORDER BY pra.path_order DESC LIMIT 1) as sector,

    (SELECT pra.risk_rating FROM path_risk_attrs pra
     WHERE pra.position_id = lp.position_id AND pra.risk_rating IS NOT NULL
     ORDER BY pra.path_order DESC LIMIT 1) as risk_rating,

    -- << INHERITED from fact_esg_scores
    (SELECT pes.esg_score FROM path_esg_scores pes
     WHERE pes.position_id = lp.position_id AND pes.esg_score IS NOT NULL
     ORDER BY pes.path_order DESC LIMIT 1) as esg_score,

    (SELECT pes.environmental_score FROM path_esg_scores pes
     WHERE pes.position_id = lp.position_id AND pes.environmental_score IS NOT NULL
     ORDER BY pes.path_order DESC LIMIT 1) as environmental_score,

    -- << LEAF-ONLY from fact_market_data
    fmd.price,
    fmd.currency,
    fmd.volume,
    fmd.market_cap,
    lp.quantity * fmd.price as position_market_value,

    -- << LEAF-ONLY from fact_fundamentals
    ff.pe_ratio,
    ff.debt_to_equity,
    ff.revenue,

    -- << LEAF-ONLY from fact_risk_attributes (credit_rating is leaf-specific)
    leaf_risk.credit_rating

FROM leaf_positions lp
INNER JOIN instruments i ON i.instrument_id = lp.leaf_instrument_id
LEFT JOIN fact_market_data fmd
    ON fmd.instrument_id = lp.leaf_instrument_id
    AND fmd.market_date = '2025-10-01'::DATE
LEFT JOIN fact_fundamentals ff
    ON ff.instrument_id = lp.leaf_instrument_id
    AND ff.reporting_date = '2025-09-30'::DATE  -- Most recent quarter
LEFT JOIN fact_risk_attributes leaf_risk
    ON leaf_risk.instrument_id = lp.leaf_instrument_id
    AND leaf_risk.attribute_date = '2025-10-01'::DATE
ORDER BY lp.position_id;

-- ============================================================================
-- EXAMPLE: Aggregate by multiple inherited dimensions
-- ============================================================================

WITH RECURSIVE portfolio_tree AS (
    SELECT
        p.position_id, p.parent_instrument_id, p.child_instrument_id,
        p.quantity::NUMERIC as quantity, p.weight::NUMERIC as cumulative_weight,
        1 as depth, ARRAY[p.parent_instrument_id, p.child_instrument_id] as path_ids
    FROM positions p
    WHERE p.parent_instrument_id = 1
      AND p.effective_from <= '2025-10-01'::DATE
      AND (p.effective_to IS NULL OR p.effective_to > '2025-10-01'::DATE)
    UNION ALL
    SELECT
        p.position_id, p.parent_instrument_id, p.child_instrument_id,
        (pt.quantity * COALESCE(p.quantity, 1.0))::NUMERIC,
        (pt.cumulative_weight * COALESCE(p.weight, 1.0))::NUMERIC,
        pt.depth + 1, pt.path_ids || p.child_instrument_id
    FROM positions p
    INNER JOIN portfolio_tree pt ON p.parent_instrument_id = pt.child_instrument_id
    WHERE p.effective_from <= '2025-10-01'::DATE
      AND (p.effective_to IS NULL OR p.effective_to > '2025-10-01'::DATE)
      AND NOT (p.child_instrument_id = ANY(pt.path_ids))
),
leaf_positions AS (
    SELECT DISTINCT ON (pt.child_instrument_id, pt.position_id)
        pt.position_id, pt.child_instrument_id as leaf_instrument_id, pt.quantity,
        pt.cumulative_weight, pt.path_ids, pt.depth
    FROM portfolio_tree pt
    WHERE NOT EXISTS (
        SELECT 1 FROM positions p2
        WHERE p2.parent_instrument_id = pt.child_instrument_id
          AND p2.effective_from <= '2025-10-01'::DATE
          AND (p2.effective_to IS NULL OR p2.effective_to > '2025-10-01'::DATE)
    )
    ORDER BY pt.child_instrument_id, pt.position_id, pt.depth DESC
),
path_risk_attrs AS (
    SELECT
        lp.position_id, p.ordinality as path_order, fra.*
    FROM leaf_positions lp
    CROSS JOIN unnest(lp.path_ids) WITH ORDINALITY as p(instrument_id, ordinality)
    LEFT JOIN fact_risk_attributes fra
        ON fra.instrument_id = p.instrument_id
        AND fra.attribute_date = '2025-10-01'::DATE
)
SELECT
    (SELECT pra.region FROM path_risk_attrs pra
     WHERE pra.position_id = lp.position_id AND pra.region IS NOT NULL
     ORDER BY pra.path_order DESC LIMIT 1) as region,

    (SELECT pra.sector FROM path_risk_attrs pra
     WHERE pra.position_id = lp.position_id AND pra.sector IS NOT NULL
     ORDER BY pra.path_order DESC LIMIT 1) as sector,

    COUNT(*) as num_positions,
    SUM(lp.quantity * fmd.price) as total_market_value,
    AVG(ff.pe_ratio) as avg_pe_ratio,
    SUM(lp.cumulative_weight) as total_weight

FROM leaf_positions lp
LEFT JOIN fact_market_data fmd
    ON fmd.instrument_id = lp.leaf_instrument_id
    AND fmd.market_date = '2025-10-01'::DATE
LEFT JOIN fact_fundamentals ff
    ON ff.instrument_id = lp.leaf_instrument_id
    AND ff.reporting_date = '2025-09-30'::DATE
GROUP BY region, sector
ORDER BY total_market_value DESC;